import "dart:io";

import 'package:xml/xml.dart';
import "package:yaml/yaml.dart";

const String androidManifestFile = "android/app/src/main/AndroidManifest.xml";
const String androidBuildGradleFile = "android/app/build.gradle";
const String iOSInfoPlistFile = "ios/Runner/Info.plist";
const String iOSXcconfigDirectory = "ios/Flutter/";
const String flutterFlavorKey = "flutter_flavor";

execute() {
  print("❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖");
  print("❖❖                     FLUTTER FLAVOR                     ❖❖");
  print("❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖");
  print("");

  final Map<String, dynamic> settings = _getSettings();
  if (settings.containsKey("flavors")) {
    Map<String, dynamic> flavors = Map<String, dynamic>();
    settings["flavors"].forEach((key, value) {
      flavors.addAll(
        {
          key: value,
        },
      );
    });

    Map<String, dynamic>? dimensions =
        Map<String, dynamic>.from(settings["dimensions"]);

    _configureFlavorsAndroid(dimensions, flavors);
    _configureFlavorsIOS(dimensions, flavors);

    print("✔ Finished successfuly");
  } else {
    print("✘ Error: Not found flavors key!");
  }
}

///
/// Return settings of `pubspec.yaml`
///
Map<String, dynamic> _getSettings() {
  final File file = File("pubspec.yaml");
  final String yamlString = file.readAsStringSync();
  final Map yamlMap = loadYaml(yamlString);

  if (!(yamlMap[flutterFlavorKey] is Map)) {
    throw new Exception("✘ Error: Not found $flutterFlavorKey key!");
  }

  final Map<String, dynamic> config = <String, dynamic>{};
  for (MapEntry<dynamic, dynamic> entry in yamlMap[flutterFlavorKey].entries) {
    config[entry.key] = entry.value;
  }

  return config;
}

///
/// Android
///
/// Configure app name in AndroidManifest.xml File
///
void _configureAppNameAndroid() {
  final File file = File(androidManifestFile);
  final String xmlString = file.readAsStringSync();
  XmlDocument document = XmlDocument.parse(xmlString);

  Iterable<XmlElement> applications = document.findAllElements('application');

  XmlNode application = applications.first;
  XmlAttribute androidLabel = application.attributes.firstWhere(
    (XmlAttribute attribute) => attribute.name.toXmlString() == 'android:label',
  );

  if (androidLabel.value != '@string/app_name') {
    androidLabel.value = '@string/app_name';
    file.writeAsStringSync(document.toXmlString(pretty: true));
  }
}

///
/// Android
///
/// Configure Google Ads id in AndroidManifest.xml File
///
void _configureGoogleAdsIdAndroid() {
  final File file = File(androidManifestFile);
  final String xmlString = file.readAsStringSync();
  XmlDocument document = XmlDocument.parse(xmlString);

  Iterable<XmlElement> applications = document.findAllElements('application');

  XmlNode application = applications.first;
  Iterable<XmlElement> metaDatas = application
      .findAllElements("meta-data")
      .where(
        (element) => element.attributes.any(
          (attribute) =>
              attribute.value == "com.google.android.gms.ads.APPLICATION_ID",
        ),
      );

  XmlNode? metaData;

  if (metaDatas.isNotEmpty) {
    metaData = metaDatas.first;
    if (metaData.attributes
        .any((element) => element.value != '@string/google_ads_id')) {
      XmlAttribute androidValue = metaData.attributes.firstWhere(
        (XmlAttribute attribute) =>
            attribute.name.toXmlString() == 'android:value',
      );
      if (androidValue.value != '@string/google_ads_id') {
        androidValue.value = '@string/google_ads_id';
        file.writeAsStringSync(document.toXmlString(pretty: true));
      }
    }
  } else {
    metaData = XmlElement(
      XmlName("meta-data"),
      [
        XmlAttribute(
          XmlName("android:name"),
          'com.google.android.gms.ads.APPLICATION_ID',
        ),
        XmlAttribute(
          XmlName("android:value"),
          '@string/google_ads_id',
        ),
      ],
    );
    application.children.insert(0, metaData);
    file.writeAsStringSync(document.toXmlString(pretty: true));
  }
}

///
/// Android
///
/// Configure flavors in build.gradle File
///
void _configureFlavorsAndroid(
  Map<String, dynamic>? dimensions,
  Map<String, dynamic> flavors,
) {
  final File file = File(androidBuildGradleFile);
  final String buildGradleString = file.readAsStringSync();

  final String androidEntryPoint = 'android {';
  final int androidPosition = buildGradleString.indexOf(androidEntryPoint);
  final bool existingFlavorDimensions =
      buildGradleString.contains("flavorDimensions");

  final String beginFlutterFlavorDimensions =
      '// BEGIN FLAVORS (autogenerated by flutter_flavor) ';
  final String endFlutterFlavorDimensions =
      '// END FLAVORS (autogenerated by flutter_flavor) ';

  final int beginFlutterFlavorDimensionsPosition =
      buildGradleString.indexOf(beginFlutterFlavorDimensions);

  final int endFlutterFlavorDimensionsPosition =
      buildGradleString.lastIndexOf(endFlutterFlavorDimensions);

  StringBuffer buffer = StringBuffer();

  if (existingFlavorDimensions) {
    buffer.write(
      buildGradleString.substring(
        0,
        beginFlutterFlavorDimensionsPosition - 4,
      ),
    );
  } else {
    buffer.writeln(
      buildGradleString.substring(
        0,
        androidPosition + androidEntryPoint.length,
      ),
    );
  }

  buffer.writeln('    $beginFlutterFlavorDimensions');
  if (dimensions != null &&
      dimensions.containsKey("android") &&
      dimensions["android"] != null &&
      dimensions["android"] is String) {
    buffer.writeln('    flavorDimensions "${dimensions["android"]}"');
  } else {
    buffer.writeln('    flavorDimensions "flutter-flavor"');
  }

  buffer.writeln();

  buffer.writeln('    productFlavors {');

  flavors.forEach((key, value) {
    Map<String, dynamic> app = Map<String, dynamic>.from(value["app"]);
    Map<String, dynamic> android = Map<String, dynamic>.from(value["android"]);

    String flavorName = key;

    buffer.writeln('        $flavorName {');
    if (android.containsKey("dimension") &&
        android["dimension"] != null &&
        android["dimension"] is String) {
      buffer.writeln('            dimension "${android["dimension"]}"');
    } else {
      buffer.writeln('            dimension "flutter-flavor"');
    }

    if (android.containsKey("applicationId") &&
        android["applicationId"] != null &&
        android["applicationId"] is String) {
      buffer.writeln('            applicationId "${android["applicationId"]}"');
    } else if (app.containsKey("id") &&
        app["id"] != null &&
        app["id"] is String) {
      buffer.writeln('            applicationId "${app["id"]}"');
    } else {
      buffer.writeln('            applicationId "com.example"');
    }

    if (android.containsKey("name") &&
        android["name"] != null &&
        android["name"] is String) {
      _configureAppNameAndroid();
      buffer.writeln(
          '            resValue "string", "app_name", "${android["name"]}"');
    } else if (app.containsKey("name") &&
        app["name"] != null &&
        app["name"] is String) {
      _configureAppNameAndroid();
      buffer.writeln(
          '            resValue "string", "app_name", "${app["name"]}"');
    }

    if (android.containsKey("googleAdsId") &&
        android["googleAdsId"] != null &&
        android["googleAdsId"] is String) {
      _configureGoogleAdsIdAndroid();
      buffer.writeln(
          '            resValue "string", "google_ads_id", "${android["googleAdsId"]}"');
    }

    buffer.writeln('        }');
  });
  buffer.writeln('    }');

  buffer.write('    $endFlutterFlavorDimensions');

  buffer.write(
    buildGradleString.substring(
      existingFlavorDimensions
          ? endFlutterFlavorDimensionsPosition +
              endFlutterFlavorDimensions.length
          : androidPosition + androidEntryPoint.length,
    ),
  );

  file.writeAsStringSync(buffer.toString());
}

///
/// iOS
///
/// Configure iOS Info.plist File
///
void _configureBundleNameIOS() {
  final File file = File(iOSInfoPlistFile);
  final String xmlString = file.readAsStringSync();
  XmlDocument document = XmlDocument.parse(xmlString);

  Iterable<XmlElement> dicts = document.findAllElements('dict');
  XmlElement dict = dicts.first;

  Iterable<XmlNode> keys = dict.children
      .where((element) => element is XmlElement && element.name.local == 'key');

  Iterable<XmlNode>? elements =
      keys.where((XmlNode node) => node.text == 'CFBundleName');

  if (elements.isNotEmpty) {
    XmlNode? element = elements.first;

    Iterable<XmlNode> xmlValues = element.following.where((XmlNode element) =>
        element is XmlElement && element.name.local == 'string');

    if (xmlValues.isNotEmpty) {
      XmlText xmlText = xmlValues.first.firstChild as XmlText;
      if (xmlText.text != "\$(BUNDLE_NAME)") {
        xmlText.text = "\$(BUNDLE_NAME)";

        file.writeAsStringSync(document.toXmlString(pretty: true));
      }
    }
  }
}

///
/// iOS
///
/// Configure iOS Info.plist File
///
void _configureLaunchStoryboardNameIOS() {
  final File file = File(iOSInfoPlistFile);
  final String xmlString = file.readAsStringSync();
  XmlDocument document = XmlDocument.parse(xmlString);

  Iterable<XmlElement> dicts = document.findAllElements('dict');
  XmlElement dict = dicts.first;

  Iterable<XmlNode> keys = dict.children
      .where((element) => element is XmlElement && element.name.local == 'key');

  Iterable<XmlNode>? elements =
      keys.where((XmlNode node) => node.text == 'UILaunchStoryboardName');

  if (elements.isNotEmpty) {
    XmlNode? element = elements.first;

    Iterable<XmlNode> xmlValues = element.following.where((XmlNode element) =>
        element is XmlElement && element.name.local == 'string');

    if (xmlValues.isNotEmpty) {
      XmlText xmlText = xmlValues.first.firstChild as XmlText;
      if (xmlText.text != "\$(ASSET_PREFIX)LaunchScreen") {
        xmlText.text = "\$(ASSET_PREFIX)LaunchScreen";

        file.writeAsStringSync(document.toXmlString(pretty: true));
      }
    }
  }
}

void _createXcconfigFile(String flavor, String appName) {
  final File fileDebug = File("$iOSXcconfigDirectory${flavor}Debug.xcconfig");
  final File fileRelease =
      File("$iOSXcconfigDirectory${flavor}Release.xcconfig");

  StringBuffer buffer = StringBuffer();
  buffer.writeln('#include "Generated.xcconfig"');
  buffer.writeln();
  buffer.writeln('FLUTTER_TARGET=lib/main-$flavor.dart');
  buffer.writeln();
  buffer.writeln('ASSET_PREFIX=$flavor');
  buffer.writeln('BUNDLE_NAME=$appName');

  if (!fileDebug.existsSync()) {
    fileDebug.createSync(recursive: true);
    fileDebug.writeAsStringSync(buffer.toString());
  }

  if (!fileRelease.existsSync()) {
    fileRelease.createSync(recursive: true);
    fileRelease.writeAsStringSync(buffer.toString());
  }
}

///
/// iOS
///
/// Configure flavors in iOS
///
void _configureFlavorsIOS(
  Map<String, dynamic>? dimensions,
  Map<String, dynamic> flavors,
) {
  flavors.forEach((key, value) {
    Map<String, dynamic> app = Map<String, dynamic>.from(value["app"]);
    Map<String, dynamic> ios = Map<String, dynamic>.from(value["ios"]);

    if (ios.containsKey("name") &&
        ios["name"] != null &&
        ios["name"] is String) {
      _configureBundleNameIOS();
      _configureLaunchStoryboardNameIOS();
      _createXcconfigFile(key, ios["name"]);
    } else if (app.containsKey("name") &&
        app["name"] != null &&
        app["name"] is String) {
      _configureBundleNameIOS();
      _configureLaunchStoryboardNameIOS();
      _createXcconfigFile(key, app["name"]);
    }
  });
}
